import sys
import math

def graphsize ():
    #paronomastis klasmatos
    size = 0
    for i in g:
        size += len(g[i])
    return size

def initteams (templist):
    #dimioyrgo omades
    for i in g.keys():
        templist.append([i])


def connectivity (i,j):
    teamj = teams[j]
    teami = teams[i]
    counter = 0
    for elem in teamj:
        listelem = g[elem]
        for i in teami:
            if i in listelem:
                counter += 1
    return counter / edges

def teamconnectivity (i):
    connectionsum = 0
    for j in range (len(teams)):
        connectionsum += connectivity (i, j)
    return connectionsum

def dq (i,j):
    return 2*(connectivity(i,j) - teamconnectivity(i)*teamconnectivity(j))

groups = 2
totalnodes = 0

if (len(sys.argv) == 2):
    txt = sys.argv[1]
else:
    txt = sys.argv[2]
    groups = int(sys.argv[1])

g = {}


with open(txt , 'r') as graph_input:
    for line in graph_input:
        # split line and convert line parts to integers
        nodes = [int(x) for x in line.split()]
        if len(nodes) != 2:
            continue
        # if a node is not already in the graph
        # we must create a new empty list
        if nodes[0] not in g:
            g[nodes[0]] = []
        if nodes[1] not in g:
            g[nodes[1]] = []
        # we need to append the "to" node
        # to the existing list for the "from" node
        g[nodes[0]].append(nodes[1])
        g[nodes[1]].append(nodes[0])

edges = graphsize()
teams = []
initteams(teams)
Q = 0

for team in teams:
    Q -= math.pow((len(g[team[0]]) / edges) , 2)

teamone = ""
teamtwo = ""
maxdq = -sys.maxsize

while (len(teams) > groups):
    for team_one in range(len(teams)):
        for team_two in range(len(teams)):
            if team_one != team_two:
                tempdq = 0
                if connectivity(team_one , team_two) != 0:
                    tempdq = dq(team_one , team_two)
                    if tempdq > maxdq:
                        maxdq = tempdq
                        teamone = team_one
                        teamtwo = team_two
    if (teamone != ""):
        Q += maxdq
        teams[teamone] += teams[teamtwo]
        del teams[teamtwo]
    teamone = ""
    teamtwo = ""
    maxdq = -sys.maxsize

Q = round(Q , 4)
teams.sort()

for team in teams:
    print (sorted(team))

print ("Q =" , Q)
